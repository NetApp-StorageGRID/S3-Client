image:
- Ubuntu1804
- Visual Studio 2017

configuration:
- AWS
- WebscaleDemo
#- WebscaleDemoNext
- Minio

matrix:
  exclude:
  - configuration: Minio
    image: Visual Studio 2017

build: off

# Version number
version: 0.0.1.{build}

# Ignore testing a commit if only the README.md file changed
# Or if various strings are found in the commit message: updated readme, update readme, update docs, update version, update appveyor
skip_commits:
  message: /\[notest\]/
  files:
    - README.md
    - S3-Client-Tutorial.md
    - LICENSE

# Do not test on tags
skip_tags: true

# There's no need to alter the build number for a Pull Request (PR) since they don't modify anything
pull_requests:
  do_not_increment_build_number: true

environment:
  my_secret:
    secure: XglRq9/YLH8mWAX9jBnwdyAbu0cVTEWbHR+a8zHd+ddhgFriOQv9C7hubgm+DCp5
  accesskey:
    secure: adgci5dfQHHEkDaS78UHMq7EZFyz5FlFBj5GCjTAM0g=
  secretkey:
    secure: yfhbYXx6lQZfjayZ8RkkvjFvVZUFIhPROuBzkj6HHey2bflN0PeKJgGeIWXFF0p/
  APPVEYOR_SSH_KEY: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6GMJ5njfnun87K3Ph4yKz/A00od/m0n+OlQ+M6B9JBn73aANr4CObDwnwyIw96ZKp8GGFGdDCQOoKVk+2kjGv/sBZZaLw3kXWgR8RmCIYCD6gtS5O/Zj1b403z8X3rFARsUliNJqYHH8TZGLwNrQy8/GklaqWqyXe2RYr2w7QCU+5zOMFyhibqRcRlBYurhk2LWs95uxdzVAD+xkZXfFTSXUUTCBrlbv+jkRHgAgM9x6Ki+P8VnZ6FnMAs5wI8aP38zHjZoA9ZyxgsZht+1YWazlAjiH2b114oezwgbQQDtSYm5xATmhfZtghrDzsfqCxBDSUKgGlgjmplxCGFl9j florianf@florianf-mac-0

# enable docker which is used for Minio
services:
- docker

# Install Pester for testing, setup AWS Profiles and deploy minio via docker
install:
  - ps: $PSVersionTable
  - ps: Install-Module Pester -Scope CurrentUser -Force -SkipPublisherCheck -MinimumVersion 4.4.4
  - ps: Import-Module -Name Pester -Force
  - ps: Install-Module StorageGRID-Webscale -Scope CurrentUser -Force -SkipPublisherCheck -AllowPrerelease
  - ps: iex ((New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/appveyor/secure-file/master/install.ps1'))
  - cmd: mkdir %USERPROFILE%\.aws
  - cmd: mkdir %USERPROFILE%\.sgw
  - cmd: appveyor-tools\secure-file -decrypt etc\.aws\config.enc -out %USERPROFILE%\.aws\config -secret %my_secret%
  - cmd: appveyor-tools\secure-file -decrypt etc\.aws\credentials.enc -out %USERPROFILE%\.aws\credentials -secret %my_secret%
  - cmd: appveyor-tools\secure-file -decrypt etc\.sgw\config.enc -out %USERPROFILE%\.sgw\config -secret %my_secret%
  - cmd: appveyor-tools\secure-file -decrypt etc\.sgw\credentials.enc -out %USERPROFILE%\.sgw\credentials -secret %my_secret%
  - sh: mkdir $HOME/.aws
  - sh: mkdir $HOME/.sgw
  - sh: ./appveyor-tools/secure-file -decrypt etc/.aws/config.enc -out $HOME/.aws/config -secret $my_secret
  - sh: ./appveyor-tools/secure-file -decrypt etc/.aws/credentials.enc -out $HOME/.aws/credentials -secret $my_secret
  - sh: ./appveyor-tools/secure-file -decrypt etc/.sgw/config.enc -out $HOME/.sgw/config -secret $my_secret
  - sh: ./appveyor-tools/secure-file -decrypt etc/.sgw/credentials.enc -out $HOME/.sgw/credentials -secret $my_secret

before_test:
  - sh: if [[ "$CONFIGURATION" == "Minio" ]]; then docker pull minio/minio;fi
  - sh: if [[ "$CONFIGURATION" == "Minio" ]]; then docker run -d -p 9000:9000 -e "MINIO_ACCESS_KEY=$accesskey" -e "MINIO_SECRET_KEY=$secretkey" -e "MINIO_BROWSER=off" minio/minio server /data;fi
# enable SSH
#  - sh: export APPVEYOR_SSH_BLOCK=true
#  - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
# enable RDP
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# Invoke Pester to run all of the unit tests, then save the results into XML in order to populate the AppVeyor tests section
# If any of the tests fail, consider the pipeline failed
test_script:
#  - ps: $DebugPreference = "Continue"
#  - ps: $VerbosePreference = "Continue"
  - ps: Get-Culture
  - ps: $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile TestsResults.xml -PassThru -Script @{Path="./src/S3-Client.Tests.ps1";Parameters=@{ProfileName=$($env:CONFIGURATION)}}
  - ps: (New-Object System.Net.WebClient).UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestsResults.xml))
  - ps: if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."}
